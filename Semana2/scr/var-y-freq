#Semana 2 - Variables y Frecuencias
#Autor: María Alejandra Navarro Corredor

knitr::opts_chunk$set(echo = TRUE)

# Ver los set de datos para los paquetes cargado actualmente

data()

# Ver los set de datos para todos los paquetes instalados

data(package = .packages(all.available = TRUE))

#paquetes necesarios para la práctica
library(ape)
library(permute)
library(lattice)
library(vegan)
library(ade4)
library(geiger)
library(sp)

# Paquete ape
data(carnivora)

#Paquete permute
data(jackal)

#Paquete vegan
data(jackal)

data(BCI)

data(mite.env)

#Paquete ade4
data(atlas)

data(carniherbi49)

data(corvus)

data(tortues)

#Paquete geiger
data(geospiza)

###**Ejer:** Â¿Que clase de objeto es BIC? Â¿QuÃ© clase de objeto es geospiza? use la funciÃ³n *str* para obtener
##informaciÃ³n sobre la estructura.

#clase de objeto de BIC
class(BIC) 

#Case de objeto de geospiza
class(geospiza)

#estructura
str(BIC)
str(geospiza)

#### Objetos tipo lista

# Clase
class(geospiza)


#Estructura
str(geospiza)

# ¿Qué es geospiza?
help("geospiza")

#objetos S3?, este tipo de listas se navegan igual que un data.frame.

# Para acceder al segundo objeto solo hay que mirar la estructura

geospiza$geospiza.data

# Para extraer un objeto dentro de esta tabla solo hay que asignar la posiciÃ³n

geospiza$geospiza.data[,1]

####**Ejer:** ¿Qué tipo de variable es tarsusL y qué clase?
#Abra el objeto *tortues* y mire Â¿QuÃ© tipo de variables tiene y qué clase son?, haga lo mismo con el objeto
#*mite.env* y revise ¿Qué tipo de variable es *shurb* y qué clase es? Recuerde siempre usar help para saber de
#donde vienen los datos.

help(tortues)
#¿Qué tipo de variable es tortues?
typeof(tortues)

#¿Qué clase es tortues?
class(tortues)

help(mite.env)
#¿Qué tipo de variable es mite.env?
typeof(mite.env)

#¿Qué clase es mite.env?
class(mite.env)

#mirar la proporción de sexos de un muestreo
# Semilla
set.seed(1)

#sexos
sex <- c('F', 'M')

sex

# Inventemos una muestra con las mismas probabilidades de sacar un Macho o una Hembra

pop1 <- sample(x = sex, size = 50,replace = T,prob = c(0.5,0.5))
pop1 

# imaginemos que pop1 es real y queremos saber cuÃ¡l es la razón de sexos en la muestra

M <- length(which(pop1 == 'M'))

M

F <- length(which(pop1 == 'F'))

F

# la razón es
paste(F,'/',M,sep = '')

# 0

F/M

#Encontrando más hembras que machos.

# Semilla
set.seed(1)

#sexos
sex <- c('F', 'M')

sex

# Inventemos una muestra con las mismas probabilidades de sacar un Macho o una Hembra

pop2 <- sample(x = sex, size = 50,replace = T,prob = c(0.8,0.2))

pop2

# imaginemos que pop1 es real y queremos saber cuál es la razón de sexos en la muestra

M <- length(which(pop1 == 'M'))

M

F <- length(which(pop1 == 'F'))

F

# la razón es
paste(F,'/',M,sep = '')

# 0

F/M

####**Ejer:** usando el data.frame *tortues* calcule la proporción de hembras y machos de la muestra

Mtortues <- length(which(tortues == 'M'))
Mtortues

Ftortues <- length(which(tortues == 'F'))
Ftortues

paste(Ftortues, '/', Mtortues, sep = '')
Ftortues/Mtortues

tortues

# generar la proporción entre dos medidas, 
#por ejemplo el ancho y el largo para obtener una variable derivada que represente la forma.

# Imaginemos que tomamos medidas de cráneos de lagarto

Ancho<-rnorm(n = 32,mean = 10,sd = 1)

Ancho

Largo <- rnorm(n = 32,mean = 15,sd = 1)

Largo

# Construimos la tabla con medidas imaginarias
medidas<-cbind(Ancho, Largo)

medidas

Tabla_medidas <- as.data.frame(cbind(paste('spp',1:32,sep = '_'),medidas))

# tabla sin colnames

Tabla_medidas

# asigne nombres a las columnas

colnames(Tabla_medidas) <- c('Individuos', 'Ancho','Largo')

Tabla_medidas

# Relación ancho/largo

prp <- Ancho/Largo

prp 

Tabla_medidas_prp <- cbind.data.frame(Tabla_medidas, prp)

Tabla_medidas_prp 

####**Ejer:** usando el data.frame *tortues* calcule la proporciÃ³n entre el ancho y el largo del caparazón, 
#genere una tabla con la información de *tortues* y la nueva variable derivada.


caparazon <-cbind(tortues$long, tortues$larg)

caparazon

tabla_tortues <- as.data.frame(cbind(paste('spp',1:48,sep = '_'),caparazon))

colnames(tabla_tortues) <- c('Individuos', 'largo','ancho')

tabla_tortues

prop_tortues <- tortues$larg/tortues$long

prop_tortues

Tabla_prop <- cbind.data.frame(tabla_tortues, prop_tortues)

Tabla_prop 

#### Tablas
#para ver la frecuencia o el conteo de una variable es la función *table*

# Conteo o frecuencia
mite.env
freq<-table(mite.env$Substrate)

freq

# Fracción
prop.table(freq)

# Las proporciones pueden ser visualizadas usando la función *pie*
pie(prop.table(freq))

####**Ejer:** ¿Cuántas especies de *Corvus* fueron muestreadas en la región Paleártica-Africana? 
#Use el data.frame del género *Corvus*. ¿Qué porcentaje de *Corvus* muestreados habitan zonas abiertas

help(corvus)

frecuencia <- table(corvus$phylog)
frecuencia

prop.table(frecuencia)

pie(prop.table(frecuencia))

frec_zona <- table(corvus$habitat)
frec_zona

#¿Cuántas especies de *Corvus* fueron muestreadas en la región Paleártica-Africana?  
#RTA= 9

#¿Qué porcentaje de *Corvus* muestreados habitan zonas abiertas?
#RTA = 17


#### Distribución de frecuencias.
#sumatorio de las ocurrencias de los datos clasificados en categóricas no solapadas.

# Sustrato de Orbatidos

# freq era la tabla de frecuencias construida anteriormente
freq

mite.env$Substrate

# Graficar las frecuencias de cada sustrato
plot(freq)


#### ¿Cómo luce el gráfico de frecuencias para los tipos de hábitat del género *Corvus*?

frec_zona

plot(frec_zona)

#Pero si las variables son cuantitativas, los valores deben ser dispuestos en rangos que 
#permitan observar el comportamiento de las frecuencias.

#Primero, debemos generar una tabla de frecuencias

# Sumar las ocurrencias de cada especie
atlas$birds

xsp<- apply(atlas$birds,2,sum)

# ¿Cuál es el mínimo 
min(xsp)

which.min(xsp)


xsp[which.min(xsp)]

# generar vectores

min(xsp)

x <- which.min(xsp)


xsp[x]

####**Ejer:** encuentre el máximo, así como lo hizo para el mínimo
#Preguntar cuál es el  el máximo

max(xsp)
y <- which.max(xsp)

xsp[y]


max(xsp)

which.max(xsp)


xsp[which.max(xsp)]

# poodemos graficar la frecuencia de cada especies
plot(as.table(xsp))


#organizando los valores en rangos

# Longitud de las tortugas
tortues$long

# no tendrá sentido, debemos organizar en rangos
table(tortues$long)

# Preguntar cuál es el mínimo 
min(tortues$long)

# Preguntar cuál es el máximo
max(tortues$long)

# La función rangos nos permite ver directamente el rango
range(tortues$long)

# nuestra muestra estará en un rango de 92.5 a 177.5

# genere las cajas

bins <- seq(92.5,182.5, 10)

# Agrupe los datos en las cajas

datos<- cut(tortues$long,bins)

# genere la tabla de frecuencias
freq_long<-table(datos)

# Usamos transfrom para generar un data.frame de frecuencias
transform(freq_long)

# Podemos usarlo para adicionar más información a cada rango. Freq es una variable interna 
# generada a partir de transform(freq_long)

transform(freq_long, Relativ= prop.table(Freq), Acum= cumsum(Freq))

#visualizar los datos *hist*
# Histograma a partir de datos crudos

hist(tortues$long)

# Histograma definiendo las cajas 

hist(tortues$long, breaks = bins, main = 'Longitudes de caparazón')

#### **Ejer:** Repita el ejercicio para las variables continuas de tamaño de pico y 
#tamaño del ala en el género *Corvus*. Busque cómo cambiar colores, ejes y algunas propiedades 
#que le permitan mejorar el diseño del histograma.


corvus$wing

table(corvus$wing)

min(corvus$wing)

max(corvus$wing)

range(corvus$wing)

corvus_bins <- seq(225.5, 475.5, 10)

datos_Corvus <- cut(corvus$wing,corvus_bins)

freq_wing <-table(datos_Corvus)

transform(freq_wing)

hist(corvus$wing)

hist(corvus$wing, breaks = corvus_bins, main = 'Tamaño del ala')

####Invente unos datos de medidas, como se hizo en el caso de los cráneos, y genere todo el ejercicio 
#hasta el histograma. Busque otro tipo de distribuciones para generar las variables [ejemplo][3]. 
#Busque en quÃ© casos sirve cada distribuciÃ³n o para quÃ© se usan.

####estaturas de 20 personas

estatura <- c(1.49, 1.52, 1.54, 1.55, 1.56, 1.61, 1.63, 1.63, 1.65, 1.66, 1.67, 1.68, 1.71, 1.72, 
              1.73, 1.75, 1.77, 1.78, 1.80, 1.83)
media <- mean(estatura)
media
desv <- sd(estatura)
desv

#densidad de los datos
dnorm(170,media, desv)

#probabilidad de que alguien tenga la altura de 170

pnorm(170,media,desv)

#altura respecto al 40% 
qnorm(0.40,media,desv)

#5 alturas aleatorias
rnorm(5,media,desv)

####PESO

peso <- c(40, 58, 56, 64, 60, 54, 49, 60, 70, 58, 57, 68, 54, 75, 80, 74, 78, 69, 100, 73)
peso

media_peso <- mean(peso)
media_peso
desv_peso <- sd(estatura)
desv_peso


#medidas; relación entre la estatura y peso en 20 personas 
medidas_1 <- cbind(estatura, peso)
medidas_1

Tabla_medidas1 <- as.data.frame(cbind(paste('ind',1:20,sep = ''),medidas_1))

colnames(Tabla_medidas1) <- c('N°', 'Estatura(m)','Peso(Kg)')

Tabla_medidas1

#Cálculo del Índice de Masa Corporal (IMC)
IMC_1 <- peso/estatura^2 
IMC_1
IMC <- round(IMC_1, digits = 2)
IMC

Tabla_medidas_IMC <- cbind.data.frame(Tabla_medidas1, IMC)
Tabla_medidas_IMC

#cúal es el valor mínimo de IMC y a cuál individuo corresponde
min(Tabla_medidas_IMC$IMC)
which.min(Tabla_medidas_IMC$IMC)
Tabla_medidas_IMC$`N°`[which.min(Tabla_medidas_IMC$IMC)]

#cúal es el valor máximo de IMC y a cuál individuo corresponde
max(Tabla_medidas_IMC$IMC)
which.max(Tabla_medidas_IMC$IMC)
Tabla_medidas_IMC$`N°`[which.max(Tabla_medidas_IMC$IMC)]

#MEDIA, DESVIACIÓN ESTANDAR
media_IMC <- mean(Tabla_medidas_IMC$IMC)
media_IMC
desv_IMC<- sd(Tabla_medidas_IMC$IMC)
desv_IMC

#probabilidad de que alguien tenga 24 IMC

pnorm(24,media_IMC,desv_IMC)

#rango
range(Tabla_medidas_IMC$IMC)

caja <- seq(17.52,32.52, 3.0 )
caja

datos_IMC <- cut(Tabla_medidas_IMC$IMC, caja)
datos_IMC

#tabla de frecuencias
freq_IMC<-table(datos_IMC)
freq_IMC

transform(freq_IMC)

hist(Tabla_medidas_IMC$IMC)

hist(Tabla_medidas_IMC$IMC, breaks = caja, main = 'ÍNDICE DE MASA CORPORAL')


